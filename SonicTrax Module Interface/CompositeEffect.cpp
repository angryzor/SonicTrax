#include "StdAfx.h"
#include "CompositeEffect.h"

#include <sstream>

#include "EffectCompilationContext.h"

namespace Effects
{
	using namespace std;

	CompositeEffect::CompositeEffect(std::string name) : Effect(name)
	{
	}


	CompositeEffect::~CompositeEffect(void)
	{
	}


	void CompositeEffect::Compile(TotalCompilationContext& tcc) const
	{
		if(tcc.IsEffectCompiled(this))
			return;

		EffectCompilationContext ecc;

		// function effectname(ola, alo, loa, lao)
		{
			ecc << "function " << name_ << "(";
			for(input_vec::const_iterator i = inputs.begin(); i != inputs.end(); i++)
			{
				ostringstream oss;
				oss << (*i)->GetName();
				ecc << oss.str();

				if(i+1 != inputs.end())
					ecc << ", ";
			}
			ecc << ")";
			ecc.NewLine();
		}

		// {
		ecc << "{";
		ecc.NewLine();

		//     <various code generated by recursive process>
		//     return { v0[3] , v3[2] }
		{
			for(exit_binding_vec::const_iterator i = exit_bindings.begin(); i != exit_bindings.end(); i++)
			{
				(*i)->Compile(tcc,ecc);
			}

			ecc << "\treturn { ";
			for(exit_binding_vec::const_iterator i = exit_bindings.begin(); i != exit_bindings.end(); i++)
			{
				ecc << (*i)->GetInvoke(tcc,ecc);

				if(i+1 != exit_bindings.end())
					ecc << " , ";
			}
			ecc << " };";
			ecc.NewLine();
		}

		// }
		ecc << "}";
		ecc.NewLine();

		tcc << ecc.GetCode();
		tcc.NewLine();
	}
}
